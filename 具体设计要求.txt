Login.html
分为两个部分，注册和登陆
注册部分为一个表单，会提交到一个URL（URL均为服务器端确定，并且与相应函数绑定），包括用户名（EMAIL）、密码、城市、学校、推荐好友（非必须）。——这些信息为用户资料数据库(profile_db)的基本组成部分，另外的组成部分在个人资料修改页(profile.html)会涉及，单独储存为一个数据库。
登陆部分为另一个表单，用户名（EMAIL），密码。表单提交到一个URL，然后服务端获取表单内容后，使用EMAIL在用户资料数据库中进行查询，返回成功或者失败信息。

Index.html
该页面为主页面，登陆成功后，网页会自动进行redirect到这里。并且同时，需要根据在document载入时，读取用户资料数据库(profile_db)中用户头像、昵称，以及计算当前日期（JS在本地做），并且同步修改html元素使其对应出现在相应位置（如头像和昵称会出现在页面右上角，日期出现在左上角）。用户资料数据库(profile_db)中的信息最主要的还包括当前未读邀请数（更新在左上角），当前已读邀请数，当前已忽略邀请数，并且修改相应的html元素（已读和已忽略更新在页面右侧的MINE里面）。
其中未读邀请的详细信息，包括邀请人，时间，地点，备注信息要显示到页面正中的信息框中。为了设计简单，我们的信息框没有做来可以翻页，也就是说只有一页，共6个信息框，如果未读邀请少于6个，则隐藏不足6个的部分；超过6个，就不用推送超过第6个的部分，而如果当前显示的6个中，有邀请被处理，则隐藏被处理了的邀请（见下段），再将新的未被显示的未读邀请显示在最末尾。
在每个信息框下方有三个按钮，分别为accept，reject和ignore，用处很明显。一旦邀请被接受后，就要在用户活动数据库(activity_db)中，将该项活动的某个标记位标为1；拒绝后，标记为-1；忽略后，标记为-2。（我建议将未读消息单独标记为0或者直接留空，这个在于服务器那边如何处理），并且无论进行了1、-1或者-2的任意一个标记后，该项邀请的信息栏都要被设置为display：none

Profile.html
这个页面比较简单，当然首先载入页面的时候还是需要读取用户资料数据库(profile_db)中用户头像、昵称，以及计算当前日期（JS在本地做），并且同步修改html元素使其对应出现在相应位置（如头像和昵称会出现在页面右上角，日期出现在左上角）。页面正中间是很显眼的个人资料表单，这个表单在点击update之后会提交，点击reset后会清空。同时在页面载入的时候，这个表单里的每一项，除了密码项，都需要显示内容，内容是当前用户的资料（从数据库中读）——类似于assignment3的那个要求。然后在修改内容并且update之后，需要传到一个URL，这个URL（其实就是个function）负责更新数据库。
同时，头像的文件上传上去后，也需要妥当处理，由服务器放在一个专门的icon文件夹里。并且在页面载入的时候，需要在资料表单里面那个头像图片框处显示当前头像（4月18日会更新那个头像框）。

Arrangement.html
这个页面还未完工，因为UI一直没有想到合适的设计。不过需要做的事情如下：
首先，服务端读取用户活动数据库(activity_db)中标记为1的活动，尤其是时间项，然后把这个时间封装好传回浏览器，交给JS处理。JS收到后，判断这个时间是否在当前日期之后的7天内，如果在，就将页面正中的时间轴上相应日期（id）的点的display改为可见（默认是有7个点，表示7天，初始均为display：none）。
其次，如果用户点击时间轴上的某个点，会在上方弹出一个小的窗口（不是弹出一个巨大的新窗口，类似于弹出一个菜单，这个js代码网上可以查到），在这个小窗口中，会显示当天所有的活动，及其邀请人和具体时间信息（这些活动需要点按钮时向服务器发起一个数据库查询请求，以当天日期和当前用户id作为索引，去数据库中找相应的标记为1的活动信息反馈回来，peel可以用AJAX将这些索引封装好，发给服务器，服务器那边用一个函数接收并且响应）。
最后是“反馈”，就是弹出这个小窗口后，如果用户对某个活动不太满意，想和发起者进行讨论，则点击小窗口里每个活动旁边都有的一个小按钮，这个按钮会触发一个新窗口，新窗口里只有一个表单，包含一个文字输入框，一个提交按钮，输入内容并且提交后（收件人是被反馈的活动的发起者），表单会提交到一个URL，服务端接收到后，更新第三个数据库，用户短信息数据库（mail_db），这个短信息数据库保存有每个用户已读和未读的信息。
而这个数据库（mail_db）的信息，其实除了login页面之外，都需要在document载入的时候就被读入。只需要读当前未读信息有多少封（已读为1，未读为0），然后更新到每个页面右边的那个MINE资料栏里。


------------------------------------------------------------------------------------
数据库
Profile_db
用户编号（ID），用户EMAIL，密码，用户昵称，性别，用户头像地址，是否允许被邀请，好友数，总邀请数，未读邀请数，已读邀请数，已忽略邀请数……以及那些profile页面有的

Activity_db
用户编号（ID），标记位，邀请人，活动时间，地点，备注

Mail_db
用户编号（ID），标记位，发件人，发件时间，内容

函数
处理用户注册
处理用户登陆
查询Profile_db数据库
更新Profile_db数据库（profile页面和login页面都会出现更新数据库的操作）
查询Activity_db数据库（包括查询邀请数，和查询详细邀请信息）
更新Activity_db数据库（接受，拒绝，忽略之后）
查询mail_db数据库
更新mail_db数据库（更新一般是由别人更新你的，因为信息是收到来自别人的，这个数据库才会更新）
Arrangement页面点击日期按钮后查询当天相应活动

*我可能还有些考虑不是很周全的地方，或者你们有什么疑问，都可以联系我。
可能时间不是很多了，大家有不明白的尽量百度或者google搞定吧，我们并行一起做会更OK。
如果GitHub有更新，麻烦都在微信群里知会大家一声，也方便彼此同步。



——————2014-04-23
今天下午最主要的事
1. 实现头像上传、头像获取并且显示在profile页面、index页面、所有页面的右上角（孙总）
2. Arrangement页面，要求点击某个日期按钮的时候，读取数据库里面当天已经标记为1的活动，显示在弹出的框内。（孙总）
3. 实现邮件提示功能，这个功能等我先重新做好邮件提示框之后再做。
3. 三个按钮、三个导航颜色、index页面内容为空时的占位符
4. 右侧MINE页面的格式修改
5. 页面布局再调整
6. 测试，加入一系列帐号、活动等，方便晚上演示。
